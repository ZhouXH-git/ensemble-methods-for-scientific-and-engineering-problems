/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    system;
    object      sampleDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Set output format : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
type sets;
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      foamFile    : separate points, faces and values file
//      dx          : DX scalar or vector format
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//
// Note:
// other formats such as obj, stl, etc can also be written (by proxy)
// but without any values!
surfaceFormat vtk;

// interpolationScheme. choice of
//      cell          : use cell-centre value only; constant over cells (default)
//      cellPoint     : use cell-centre and vertex values
//      cellPointFace : use cell-centre, vertex and face values.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPoint;

// Fields to sample.
fields
(
    //UDNS
    U
    //k
    //turbulenceProperties:R
    //wallShearStress
    //divTau_Breuer
    //divTau_IC
    //TauDNS_Breuer
);

// Set sampling definition: choice of
//      uniform             evenly distributed points on line
//      face                one point per face intersection
//      midPoint            one point per cell, in between two face intersections
//      midPoint     combination of face and midPoint
//
//      curve               specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      uniform, face, midPoint, midPoint : start and end coordinate
//      uniform: extra number of sampling points
//      curve, cloud: list of coordinates
sets
(
    line_jet_exit
    {
        type        uniform;
        axis        z;
        start       (0 0 0);
        end         (0 0 0.0254);
        nPoints      100;
    }

    line_center
    {
        type        uniform;
        axis        x;
        start       (0.0508 0  1.0e-7);
        end         (1.1176 0  1.0e-7);
        nPoints      100;
    }

    line_x_2
    {
        type        uniform;
        axis        z;
        start       (0.1016 0 0);
        end         (0.1016 0 0.0711);
        nPoints      100;
    }

    line_x_5
    {
        type        uniform;
        axis        z;
        start       (0.2540 0 0);
        end         (0.2540 0 0.0711);
        nPoints      100;
    }

    line_x_10
    {
        type        uniform;
        axis        z;
        start       (0.5080 0 0);
        end         (0.5080 0 0.0711);
        nPoints      100;
    }

    line_x_15
    {
        type        uniform;
        axis        z;
        start       (0.7620 0 0);
        end         (0.7620 0 0.0711);
        nPoints      100;
    }

    line_x_20
    {
        type        uniform;
        axis        z;
        start       (1.0160 0 0);
        end         (1.0160 0 0.0711);
        nPoints      100;
    }

    // line_x_500
    // {
    //     type        cloud;
    //     axis        z;
    //     points      
    // (
    //     ()
    // );
    // }

);

// Surface sampling definition: choice of
//      plane : values on plane defined by point, normal.
//      patch : values on patch.
//
// 1] patches are not triangulated by default
// 2] planes are always triangulated
// 3] iso-surfaces are always triangulated
surfaces
(

);

// *********************************************************************** //
